name: CI/CD Pipeline

on:
  pull_request:
    branches: [dev,master]

permissions:
  contents: write
  deployments: write
  packages: write
env:
  MY_NAME_PROYECT: 'gfaster'
  ROOT_URL_PROYECT: 'gfaster.com'
  SECURE_LOG_LEVEL: 'debug'
  DEPLOY_ENVIRONMENT: ${{ github.base_ref }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: ghcr.io/${{ github.repository }}:${{ github.event.pull_request.number }}
        build-args: |
          NPM_TOKEN=${{ secrets.GITHUB_TOKEN }}
          DEPLOY_ENVIRONMENT=${{ env.DEPLOY_ENVIRONMENT }} 

  deploy:
    needs: build
    runs-on: [self-hosted, gfaster-runner ]  # This line specifies the self-hosted runner named "gfaster-runner"
    steps:
    - uses: actions/checkout@v2

    - name: Create GitHub deployment
      id: deployment
      uses: actions/github-script@v6
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const result = await github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha,
            environment: '${{ env.DEPLOY_ENVIRONMENT }}',
            auto_merge: false
          })
          return result.data.id
      
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Deploy
      env:
        IMAGE: ghcr.io/${{ github.repository }}:${{ github.event.pull_request.number }}
        CONTAINER_NAME: ${{ env.MY_NAME_PROYECT }}-${{ env.DEPLOY_ENVIRONMENT }}
      run: |
        echo $CONTAINER_NAME
        docker-compose -f docker-compose.yml up -d --force-recreate
        
  
